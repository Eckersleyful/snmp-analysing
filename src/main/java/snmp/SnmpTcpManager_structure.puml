@startuml

/' diagram meta data start
config=StructureConfiguration;
{
  "projectClassification": {
    "searchMode": "OpenProject", // OpenProject, AllProjects
    "includedProjects": "",
    "pathEndKeywords": "*.impl",
    "isClientPath": "",
    "isClientName": "",
    "isTestPath": "",
    "isTestName": "",
    "isMappingPath": "",
    "isMappingName": "",
    "isDataAccessPath": "",
    "isDataAccessName": "",
    "isDataStructurePath": "",
    "isDataStructureName": "",
    "isInterfaceStructuresPath": "",
    "isInterfaceStructuresName": "",
    "isEntryPointPath": "",
    "isEntryPointName": "",
    "treatFinalFieldsAsMandatory": false
  },
  "graphRestriction": {
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step
    "removeByAnnotation": "",
    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done
    "removeByClassName": "",
    "cutMappings": false,
    "cutEnum": true,
    "cutTests": true,
    "cutClient": true,
    "cutDataAccess": true,
    "cutInterfaceStructures": true,
    "cutDataStructures": true,
    "cutGetterAndSetter": true,
    "cutConstructors": true
  },
  "graphTraversal": {
    "forwardDepth": 3,
    "backwardDepth": 3,
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "hideMappings": false,
    "hideDataStructures": false,
    "hidePrivateMethods": true,
    "hideInterfaceCalls": true, // indirection: implementation -> interface (is hidden) -> implementation
    "onlyShowApplicationEntryPoints": false, // root node is included
    "useMethodCallsForStructureDiagram": "ForwardOnly" // ForwardOnly, BothDirections, No
  },
  "details": {
    "aggregation": "GroupByClass", // ByClass, GroupByClass, None
    "showClassGenericTypes": true,
    "showMethods": true,
    "showMethodParameterNames": true,
    "showMethodParameterTypes": true,
    "showMethodReturnType": true,
    "showPackageLevels": 4,
    "showDetailedClassStructure": true
  },
  "rootClass": "snmp.SnmpTcpManager",
  "extensionCallbackMethod": "" // qualified.class.name#methodName - signature: public static String method(String)
}
diagram meta data end '/



digraph g {
    rankdir="TB"
    splines=polyline
    

'nodes 
subgraph cluster_1024445732 { 
   	label=analysis
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   SnmpAnalysing1024445732[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)SnmpAnalysing</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >#   javaThreads: Set&lt;Thread&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >#   managerThreads: Set&lt;SnmpManagerThread&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   parallelThreads: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   pollAmount: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   pollFrequency: int [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ runParallelSnmpGets(udp: boolean)</TD></TR>
<TR><TD ALIGN="LEFT" >- standardDeviation(values: List&lt;Long&gt;, mean: double): double</TD></TR>
<TR><TD ALIGN="LEFT" >- writeResultsToFile(fileName: String, firstPollMean: long, allPollsmean: long, standardDeviation: long, fastestPoll: long, slowestPoll: long)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

subgraph cluster_3535166 { 
   	label=snmp
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   SnmpBaseManager3535166[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)SnmpBaseManager</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >#   LOCALHOST: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   SNMP_COMMUNITY: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   SNMP_VERSION: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   TIMESTAMP_OID: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   communityTarget: CommunityTarget [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   pdu: PDU [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   snmp: Snmp [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   transportMapping: TransportMapping [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >- init()</TD></TR>
<TR><TD ALIGN="LEFT" >+ sendSnmpRequest(): ResponseEvent</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

SnmpManagerThread3535166[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)SnmpManagerThread</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   executionTimes: ArrayList&lt;Long&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   pollAmount: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   pollFrequency: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   snmpBaseManager: SnmpBaseManager [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ run()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

SnmpTcpManager3535166[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)SnmpTcpManager</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

SnmpUdpManager3535166[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)SnmpUdpManager</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

'edges    
SnmpAnalysing1024445732 -> SnmpManagerThread3535166[label="managerThreads
[0..*]"];
SnmpBaseManager3535166 -> SnmpTcpManager3535166[arrowhead=none, arrowtail=empty, dir=both];
SnmpBaseManager3535166 -> SnmpUdpManager3535166[arrowhead=none, arrowtail=empty, dir=both];
SnmpManagerThread3535166 -> SnmpBaseManager3535166[label="snmpBaseManager
[0..1]"];
    
}
@enduml